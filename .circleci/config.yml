# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            #aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:07}
            #aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-frontend:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/node:13.8.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
     # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end 
          command: |
            cd backend
            npm install
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      # Docker image that is compatible with NodeJS.
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend test
          command: |
            cd frontend
            npm install
            npm run test   

  test-backend:
    docker:
      # Docker image that is compatible with NodeJS.
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command: |
            cd backend
            npm install
            npm run test  

  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Scan frontend dependencies
            command: |
              cd frontend
              npm install
              npm install --save-dev webpack@5.72.0
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
             cd backend
             npm install
             npm install --save-dev webpack@5.72.0
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

              
  configure-infrastructure:
      docker:
        # Docker image here that supports Ansible
        - image: python:3.7-alpine3.11
        
      steps: 
        # Checkout code from git
        # Add ssh keys with fingerprint
        # attach workspace
        # Install dependencies
        # Configure server
        - checkout
        - add_ssh_keys:
            fingerprints: ["19:a9:98:05:4a:cd:5c:1d:88:17:a8:30:dc:05:c5:4d"]

        - attach_workspace:
            at: ~/
            
        - run:
            name: Install dependencies
            command: |
              # Your code here
              apk add --update ansible
              # exit 1
        - run:
            name: Configure server
            command: |
              # Your code here
              pwd
              cat .circleci/ansible/inventory.txt

              echo ENVIRONMENT=production > "backend/.env"
              ls
              echo TYPEORM_CONNECTION=postgres >> "backend/.env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
              echo NODE_ENV=production >> "backend/.env"

              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
              ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
              cat backend/.env
              ls backend

              # exit 1
        # Here's where you will add some code to rollback on failure  
        - run:
            name: Install AWS CLI for rollback
            when: on_fail
            command: |
              apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
        - persist_to_workspace:
            root: ~/
            paths:
              - project/backend
        - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID}"      

        - restore_cache:
            keys: [backend-build]
        - run: 
            name: Install dependencies
            command: |
              apk add --update ansible # install the dependencies needed

  # deploy-infrastructure:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #      - image: circleci/node:13.8.0
     
  #   steps:
  #     # Checkout code from git
  #     - checkout
      
      
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             # --template-file .circleci/files/backend.yml \
  #             # --tags project=your-tag \
  #             # --stack-name "your back-end stack name with workflow id" \
  #             # --parameter-overrides ID="your workflow id"  
  #             # exit 1
  #             --template-file .circleci/files/backend.yml \
  #             --tags project=udapeople \
  #             --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \

  #     - run:
  #         name: Ensure frontend infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             # --template-file .circleci/files/frontend.yml \
  #             # --tags project=your-tag \
  #             # --stack-name "your front-end stack name with workflow id" \
  #             # --parameter-overrides ID="your workflow id"  
  #             # exit 1

  #             --template-file .circleci/files/frontend.yml \
  #             --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
  #             --tags project=udapeople
                   
  #     - run:
  #         name: Add backend IP to ansible inventory
  #         command: |
  #           # Your code here
  #             echo [all] > .circleci/ansible/inventory.txt
  #             aws ec2 describe-instances \
  #               --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #               --output text >> inventory            
  #           # exit 1

  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt
  #           - output.txt
  #     # Here's where you will add some code to rollback on failure      
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID}" 

#
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  autodeploy:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]          